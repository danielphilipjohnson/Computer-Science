#!/usr/bin/env python3

import json
import operator
import locale
import sys
import reports
import emails 

def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  locale.setlocale(locale.LC_ALL, 'en_US.UTF8')
  max_revenue = {"revenue": 0}
  popular_year = {}
  yearly_sales = {}
  most_sales =  {}

  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    
    #popular_year = {}
    #yearly_sales = {}
    #most_sales =  {}
    
    year = item["car"]["car_year"]
    
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item
    # TODO: also handle max sales
    # compute fiel 
    cm = item['car']['car_make'] + " " + item['car']['car_model']

    most_sales[cm] = item['total_sales']
    # print(most_sales)


    # TODO: also handle most popular car_year
    if year in popular_year:
       popular_year[year] = popular_year[year] + 1
       yearly_sales[year] =  yearly_sales[year] + item['total_sales']
    else:
       popular_year[year] = 1
       yearly_sales[year] = item['total_sales']

    print(item)

  sorted_d = sorted(most_sales.items(), key=operator.itemgetter(1), reverse=True)
  car_model  = sorted_d[0][0]
  total_sales= sorted_d[0][1]
  #print(most_sales)


  sorted_d = sorted(popular_year.items(), key=operator.itemgetter(1), reverse=True)
  pop_year = sorted_d[0][0]
  year_sales = yearly_sales[pop_year]
  
  

  
  summary = [
    "The {} generated the most revenue: ${}".format(
      format_car(max_revenue["car"]), max_revenue["revenue"]),
    "The {} had the most sales: {}".format(car_model, total_sales),
    "The most popular year was {} with {} sales.".format(pop_year, year_sales),
  ]

  return summary

def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data


def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("car_sales.json")
  print(data)
  summary = process_data(data)
  print("\n ".join(summary))
  # TODO: turn this into a PDF report
  reports.generate("/tmp/cars.pdf", "Sales summary for last month", "\n ".join(summary), cars_dict_to_table(data) )
  # TODO: send the PDF report as an email attachment
  msg = emails.generate("automation@example.com", "student-00-91d0f4fb592d@example.com", "Sales summary for last month",
     "\n".join(summary),"/tmp/cars.pdf")
  #print(msg)
  emails.send(msg)


if __name__ == "__main__":
  main(sys.argv)



